# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'step2_menu.ui'
#
# Created by: PyQt5 UI code generator 5.15.4
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.
import win32com.client as win32
from pathlib import Path
import numpy as np
from PyQt5 import QtCore, QtGui, QtWidgets
from UI import query_report, global_setting
import cv2 as cv
from Core import Camera, generatePDF
from Core.neuralNet import predict
from Core import ReportImage,WriteExcel
import datetime


class Step2Menu(QtWidgets.QMainWindow):
    def __init__(self, parent=None, subParent=None):
        self.parent = subParent
        super(Step2Menu, self).__init__(parent)
        self.setObjectName("Form")
        self.resize(1123, 741)
        self.centralwidget = QtWidgets.QWidget(self)
        self.centralwidget.setObjectName("centralwidget")
        self.setCentralWidget(self.centralwidget)
        self.menubar = QtWidgets.QMenuBar(self)
        self.menubar.setGeometry(QtCore.QRect(0, 0, 1123, 21))
        self.menubar.setObjectName("menubar")
        self.menu = QtWidgets.QMenu(self.menubar)
        self.menu.setObjectName("menu")
        self.menu_2 = QtWidgets.QMenu(self.menubar)
        self.menu_2.setObjectName("menu_2")
        self.menu_3 = QtWidgets.QMenu(self.menubar)
        self.menu_3.setObjectName("menu_3")
        self.menu_4 = QtWidgets.QMenu(self.menubar)
        self.menu_4.setObjectName("menu_4")
        self.setMenuBar(self.menubar)
        self.statusbar = QtWidgets.QStatusBar(self)
        self.statusbar.setObjectName("statusbar")
        self.setStatusBar(self.statusbar)
        self.parameter_setting = QtWidgets.QAction(self)
        self.parameter_setting.setObjectName("parameter_setting")
        self.real_time_setting = QtWidgets.QAction(self)
        self.real_time_setting.setObjectName("real_time_setting")
        self.auto_analysis = QtWidgets.QAction(self)
        self.auto_analysis.setObjectName("auto_analysis")
        self.handExit = QtWidgets.QAction(self)
        self.handExit.setObjectName("exit")
        self.open_report = QtWidgets.QAction(self)
        self.open_report.setObjectName("open_report")
        self.modify_report = QtWidgets.QAction(self)
        self.modify_report.setObjectName("modify_report")
        self.save_report = QtWidgets.QAction(self)
        self.save_report.setObjectName("save_report")
        self.print_report = QtWidgets.QAction(self)
        self.print_report.setObjectName("print_report")
        self.query_report = QtWidgets.QAction(self)
        self.query_report.setObjectName("query_report")
        self.open_excel = QtWidgets.QAction(self)
        self.open_excel.setObjectName("open_excel")
        self.offline_analysis = QtWidgets.QAction(self)
        self.offline_analysis.setObjectName("offline_analysis")
        self.menu.addAction(self.parameter_setting)
        self.menu.addAction(self.real_time_setting)
        self.menu.addAction(self.auto_analysis)
        self.menu.addAction(self.handExit)
        self.menu_2.addAction(self.open_report)
        self.menu_2.addAction(self.modify_report)
        self.menu_2.addAction(self.save_report)
        self.menu_2.addAction(self.print_report)
        self.menu_2.addAction(self.query_report)
        self.menu_3.addAction(self.open_excel)
        self.menu_4.addAction(self.offline_analysis)
        self.menubar.addAction(self.menu.menuAction())
        self.menubar.addAction(self.menu_2.menuAction())
        self.menubar.addAction(self.menu_3.menuAction())
        self.menubar.addAction(self.menu_4.menuAction())

        self.queryReport = None
        self.globalSetting = None

        self.query_report.triggered.connect(self.showQueryReport)
        self.parameter_setting.triggered.connect(self.showGlobalSetting)
        self.open_report.triggered.connect(self.openFile)
        self.handExit.triggered.connect(self.handClose)
        self.open_excel.triggered.connect(self.openExcel)

        self.retranslateUi()
        QtCore.QMetaObject.connectSlotsByName(self)
        self.analysisPramter()

    def analysisPramter(self):
        """载物台"""
        self.startX = 0
        self.endX = 1
        self.startY = 0
        self.endY = 1
        self.stepLengthX = 1
        self.stepLengthY = 1

        """保存路径"""
        self.isSaveImage = False
        self.originImageSaveDir = ""
        self.preidctImageSaveDir = ""
        self.offlineSaveReportDir = ""
        self.onlineSaveReportDir = ""

        """报告所需参数"""
        self.className = ['矿1', '矿2', '矿3', '矿4', '矿5', '矿6', '矿7', '矿8', '矿9']
        self.pie = True
        self.page = ['', '']
        self.header = ['', '']
        self.testParmter = ['', '', '', '', '', '', '', '']
        self.startTime = ''
        self.endTime = ''

        """摄像头"""
        self.frameLeft = 176
        self.frameTop = 204
        self.frameWidth = 2400
        self.frameHeight = 1800
        self.autoExposure = False
        self.exposureTime = 30.0
        self.whiteBalanceRed = 120
        self.whiteBalanceGreen = 120
        self.whiteBalanceBlue = 120
        self.colorTemperature = 50

        """类别代表颜色"""
        self.classColor = [
            [0, 0, 0],
            [0, 0, 0],
            [0, 0, 0],
            [0, 0, 0],
            [0, 0, 0],
            [0, 0, 0],
            [0, 0, 0],
            [0, 0, 0],
            [0, 0, 0]
        ]

        self.camera = Camera.Camera()
        self.chkpth = "File/config/step2_3.pth"
        self.n_class = 9
        self.stepLength = 1
        self.Predict = predict.Predict(chkpth=self.chkpth, n_classes=self.n_class)
        self.imgPath = b"File/config/step4.pth"
        self.classArea = [0, 0, 0, 0, 0, 0, 0, 0, 0]
        self.classProportition = []

    def retranslateUi(self):
        _translate = QtCore.QCoreApplication.translate
        self.setWindowTitle(_translate("self", "step2"))
        self.menu.setTitle(_translate("self", "操作"))
        self.menu_2.setTitle(_translate("self", "试验报告"))
        self.menu_3.setTitle(_translate("self", "试验数据"))
        self.menu_4.setTitle(_translate("self", "方式"))
        self.parameter_setting.setText(_translate("self", "参数设置"))
        self.real_time_setting.setText(_translate("self", "实时显示"))
        self.auto_analysis.setText(_translate("self", "自动分析"))
        self.handExit.setText(_translate("self", "退出"))
        self.open_report.setText(_translate("self", "打开文件"))
        self.modify_report.setText(_translate("self", "修改报告"))
        self.save_report.setText(_translate("self", "保存"))
        self.print_report.setText(_translate("self", "打印"))
        self.query_report.setText(_translate("self", "历史报告查询"))
        self.open_excel.setText(_translate("self", "打开Excel"))
        self.offline_analysis.setText(_translate("self", "离线分析"))

    def closeEvent(self, a0: QtGui.QCloseEvent) -> None:
        a0.accept()
        self.parent.setVisible(True)

    def handClose(self):
        self.setVisible(False)
        self.parent.setVisible(True)

    def showQueryReport(self):
        self.queryReport = query_report.QueryReport(idx=2)
        self.queryReport.show()

    def showGlobalSetting(self):
        self.globalSetting = global_setting.GlobalSetting(subParent=self, idx=2)
        self.globalSetting.show()

    def openFile(self):
        fileName = QtWidgets.QFileDialog.getOpenFileName()
        print(fileName)

    def openExcel(self):
        fileName = QtWidgets.QFileDialog.getOpenFileName()
        if fileName[0] != '':
            out_file = Path.cwd() / fileName[0]
            excel = win32.gencache.EnsureDispatch('Excel.Application')
            excel.Visible = True
            excel.Workbooks.Open(out_file)

    def analyseImage(self):
        '''
        analyseize image
        :return:
        '''
        img = cv.imread(self.imgPath)
        mark = self.Predict.predict(image=img, stepLength=self.stepLength)
        if self.isSaveImage:
            colorMark = np.zeros((mark.shape[0], mark.shape[1], 3))
            for i in range(0, self.n_class):
                colorMark[mark == i] = self.classColor[i]
            cv.imwrite(self.preidctImageSaveDir + '/' + self.imagePath.split('/')[-1], colorMark)
        for i in range(0, self.n_class):
            self.classArea[i] += len(np.where(mark == i)[0])

    def autoAnalysis(self):
        self.startTime = datetime.datetime.now().strftime("%Y.%m.%d %H:%M")
        direction = True
        curPositionX = 0
        imageIdx = 0
        for row in range(self.startY, self.endY, self.stepLengthY):
            if direction:
                for col in range(self.startX, self.endX, self.stepLengthX):
                    curPositionX = col
                    if self.isSaveImage:
                        self.imagePath = (self.originImageSaveDir + '/' + str(imageIdx) + '.png').encode(
                            encoding='utf-8')
                    else:
                        self.imagePath = b'a.png'
                    self.camera.stage.setPosition(row, col)
                    self.camera.BinaryAutoFocus()
                    self.camera.WriteImage(imagePath=self.imagePath)
                    self.analyseImage()
                    imageIdx += 1
                direction = False
            else:
                for col in range(curPositionX, self.startX - 1, -self.stepLengthX):
                    curPositionX = col
                    if self.isSaveImage:
                        self.imagePath = (self.originImageSaveDir + '/' + str(imageIdx) + '.png').encode(
                            encoding='utf-8')
                    else:
                        self.imagePath = 'a.png'
                    self.camera.stage.setPosition(row, col)
                    self.camera.BinaryAutoFocus()
                    self.camera.WriteImage(imagePath=self.imagePath)
                    self.analyseImage()
                    imageIdx += 1
                direction = True
        self.endTime = datetime.datetime.now().strftime("%Y.%m.%d %H:%M")
        self.testParmter[1] = self.startTime + '-' + self.endTime[-5:]
        self.testParmter[5] = "自动分析方式"
        self.testParmter[6] = str(imageIdx)

    def generateReport(self):
        self.generateReportImage(piePath='m.png')
        PDF = generatePDF.GeneratePDF(pdfSavePath='a.pdf',
                                      imagePath='m.png',
                                      paramValue=self.testParmter,
                                      className=self.className,
                                      classValue=self.classProportition
                                      )
        pass

    def generateReportImage(self, piePath=''):
        reportImage = ReportImage.ReportImage()
        if self.pie:
            reportImage.generatePie(self.className, self.classProportition, imagePath=piePath)
        else:
            reportImage.generateHistStep2(self.className, self.classProportition, imagePath=piePath)

    def getClassProportition(self):
        sum = 0
        for i in range(0, self.n_class):
            sum += self.classArea[i]
        for i in range(0, self.n_class):
            tmp = round(self.classArea[i] / sum * 100, 2)
            self.classProportition.append(tmp)

    def writeExcel(self):
        excel = WriteExcel.WriteReaderExcel('./File/record/2.xlsx')
        excel.WriteStep2(header=self.header,footer=self.page,timeRange=[self.startTime,self.endTime],
                         paramter=self.testParmter,classValue=self.classProportition)
        pass
